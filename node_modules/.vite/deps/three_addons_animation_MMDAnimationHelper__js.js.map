{
  "version": 3,
  "sources": ["../../three/examples/jsm/animation/CCDIKSolver.js", "../../three/examples/jsm/animation/MMDAnimationHelper.js"],
  "sourcesContent": ["import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tQuaternion,\n\tSphereGeometry,\n\tVector3\n} from 'three';\n\nconst _q = new Quaternion();\nconst _targetPos = new Vector3();\nconst _targetVec = new Vector3();\nconst _effectorPos = new Vector3();\nconst _effectorVec = new Vector3();\nconst _linkPos = new Vector3();\nconst _invLinkQ = new Quaternion();\nconst _linkScale = new Vector3();\nconst _axis = new Vector3();\nconst _vector = new Vector3();\nconst _matrix = new Matrix4();\n\n\n/**\n * CCD Algorithm\n *  - https://sites.google.com/site/auraliusproject/ccd-algorithm\n *\n * // ik parameter example\n * //\n * // target, effector, index in links are bone index in skeleton.bones.\n * // the bones relation should be\n * // <-- parent                                  child -->\n * // links[ n ], links[ n - 1 ], ..., links[ 0 ], effector\n * iks = [ {\n *\ttarget: 1,\n *\teffector: 2,\n *\tlinks: [ { index: 5, limitation: new Vector3( 1, 0, 0 ) }, { index: 4, enabled: false }, { index : 3 } ],\n *\titeration: 10,\n *\tminAngle: 0.0,\n *\tmaxAngle: 1.0,\n * } ];\n */\n\nclass CCDIKSolver {\n\n\t/**\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Array<Object>} iks\n\t */\n\tconstructor( mesh, iks = [] ) {\n\n\t\tthis.mesh = mesh;\n\t\tthis.iks = iks;\n\n\t\tthis._valid();\n\n\t}\n\n\t/**\n\t * Update all IK bones.\n\t *\n\t * @return {CCDIKSolver}\n\t */\n\tupdate() {\n\n\t\tconst iks = this.iks;\n\n\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\tthis.updateOne( iks[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Update one IK bone\n\t *\n\t * @param {Object} ik parameter\n\t * @return {CCDIKSolver}\n\t */\n\tupdateOne( ik ) {\n\n\t\tconst bones = this.mesh.skeleton.bones;\n\n\t\t// for reference overhead reduction in loop\n\t\tconst math = Math;\n\n\t\tconst effector = bones[ ik.effector ];\n\t\tconst target = bones[ ik.target ];\n\n\t\t// don't use getWorldPosition() here for the performance\n\t\t// because it calls updateMatrixWorld( true ) inside.\n\t\t_targetPos.setFromMatrixPosition( target.matrixWorld );\n\n\t\tconst links = ik.links;\n\t\tconst iteration = ik.iteration !== undefined ? ik.iteration : 1;\n\n\t\tfor ( let i = 0; i < iteration; i ++ ) {\n\n\t\t\tlet rotated = false;\n\n\t\t\tfor ( let j = 0, jl = links.length; j < jl; j ++ ) {\n\n\t\t\t\tconst link = bones[ links[ j ].index ];\n\n\t\t\t\t// skip this link and following links.\n\t\t\t\t// this skip is used for MMD performance optimization.\n\t\t\t\tif ( links[ j ].enabled === false ) break;\n\n\t\t\t\tconst limitation = links[ j ].limitation;\n\t\t\t\tconst rotationMin = links[ j ].rotationMin;\n\t\t\t\tconst rotationMax = links[ j ].rotationMax;\n\n\t\t\t\t// don't use getWorldPosition/Quaternion() here for the performance\n\t\t\t\t// because they call updateMatrixWorld( true ) inside.\n\t\t\t\tlink.matrixWorld.decompose( _linkPos, _invLinkQ, _linkScale );\n\t\t\t\t_invLinkQ.invert();\n\t\t\t\t_effectorPos.setFromMatrixPosition( effector.matrixWorld );\n\n\t\t\t\t// work in link world\n\t\t\t\t_effectorVec.subVectors( _effectorPos, _linkPos );\n\t\t\t\t_effectorVec.applyQuaternion( _invLinkQ );\n\t\t\t\t_effectorVec.normalize();\n\n\t\t\t\t_targetVec.subVectors( _targetPos, _linkPos );\n\t\t\t\t_targetVec.applyQuaternion( _invLinkQ );\n\t\t\t\t_targetVec.normalize();\n\n\t\t\t\tlet angle = _targetVec.dot( _effectorVec );\n\n\t\t\t\tif ( angle > 1.0 ) {\n\n\t\t\t\t\tangle = 1.0;\n\n\t\t\t\t} else if ( angle < - 1.0 ) {\n\n\t\t\t\t\tangle = - 1.0;\n\n\t\t\t\t}\n\n\t\t\t\tangle = math.acos( angle );\n\n\t\t\t\t// skip if changing angle is too small to prevent vibration of bone\n\t\t\t\tif ( angle < 1e-5 ) continue;\n\n\t\t\t\tif ( ik.minAngle !== undefined && angle < ik.minAngle ) {\n\n\t\t\t\t\tangle = ik.minAngle;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ik.maxAngle !== undefined && angle > ik.maxAngle ) {\n\n\t\t\t\t\tangle = ik.maxAngle;\n\n\t\t\t\t}\n\n\t\t\t\t_axis.crossVectors( _effectorVec, _targetVec );\n\t\t\t\t_axis.normalize();\n\n\t\t\t\t_q.setFromAxisAngle( _axis, angle );\n\t\t\t\tlink.quaternion.multiply( _q );\n\n\t\t\t\t// TODO: re-consider the limitation specification\n\t\t\t\tif ( limitation !== undefined ) {\n\n\t\t\t\t\tlet c = link.quaternion.w;\n\n\t\t\t\t\tif ( c > 1.0 ) c = 1.0;\n\n\t\t\t\t\tconst c2 = math.sqrt( 1 - c * c );\n\t\t\t\t\tlink.quaternion.set( limitation.x * c2,\n\t\t\t\t\t                     limitation.y * c2,\n\t\t\t\t\t                     limitation.z * c2,\n\t\t\t\t\t                     c );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rotationMin !== undefined ) {\n\n\t\t\t\t\tlink.rotation.setFromVector3( _vector.setFromEuler( link.rotation ).max( rotationMin ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rotationMax !== undefined ) {\n\n\t\t\t\t\tlink.rotation.setFromVector3( _vector.setFromEuler( link.rotation ).min( rotationMax ) );\n\n\t\t\t\t}\n\n\t\t\t\tlink.updateMatrixWorld( true );\n\n\t\t\t\trotated = true;\n\n\t\t\t}\n\n\t\t\tif ( ! rotated ) break;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates Helper\n\t *\n\t * @return {CCDIKHelper}\n\t */\n\tcreateHelper() {\n\n\t\treturn new CCDIKHelper( this.mesh, this.iks );\n\n\t}\n\n\t// private methods\n\n\t_valid() {\n\n\t\tconst iks = this.iks;\n\t\tconst bones = this.mesh.skeleton.bones;\n\n\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\tconst ik = iks[ i ];\n\t\t\tconst effector = bones[ ik.effector ];\n\t\t\tconst links = ik.links;\n\t\t\tlet link0, link1;\n\n\t\t\tlink0 = effector;\n\n\t\t\tfor ( let j = 0, jl = links.length; j < jl; j ++ ) {\n\n\t\t\t\tlink1 = bones[ links[ j ].index ];\n\n\t\t\t\tif ( link0.parent !== link1 ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.CCDIKSolver: bone ' + link0.name + ' is not the child of bone ' + link1.name );\n\n\t\t\t\t}\n\n\t\t\t\tlink0 = link1;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction getPosition( bone, matrixWorldInv ) {\n\n\treturn _vector\n\t\t.setFromMatrixPosition( bone.matrixWorld )\n\t\t.applyMatrix4( matrixWorldInv );\n\n}\n\nfunction setPositionOfBoneToAttributeArray( array, index, bone, matrixWorldInv ) {\n\n\tconst v = getPosition( bone, matrixWorldInv );\n\n\tarray[ index * 3 + 0 ] = v.x;\n\tarray[ index * 3 + 1 ] = v.y;\n\tarray[ index * 3 + 2 ] = v.z;\n\n}\n\n/**\n * Visualize IK bones\n *\n * @param {SkinnedMesh} mesh\n * @param {Array<Object>} iks\n */\nclass CCDIKHelper extends Object3D {\n\n\tconstructor( mesh, iks = [], sphereSize = 0.25 ) {\n\n\t\tsuper();\n\n\t\tthis.root = mesh;\n\t\tthis.iks = iks;\n\n\t\tthis.matrix.copy( mesh.matrixWorld );\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.sphereGeometry = new SphereGeometry( sphereSize, 16, 8 );\n\n\t\tthis.targetSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0xff8888 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.effectorSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0x88ff88 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.linkSphereMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: new Color( 0x8888ff ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.lineMaterial = new LineBasicMaterial( {\n\t\t\tcolor: new Color( 0xff0000 ),\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis._init();\n\n\t}\n\n\t/**\n\t * Updates IK bones visualization.\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tconst mesh = this.root;\n\n\t\tif ( this.visible ) {\n\n\t\t\tlet offset = 0;\n\n\t\t\tconst iks = this.iks;\n\t\t\tconst bones = mesh.skeleton.bones;\n\n\t\t\t_matrix.copy( mesh.matrixWorld ).invert();\n\n\t\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\t\tconst ik = iks[ i ];\n\n\t\t\t\tconst targetBone = bones[ ik.target ];\n\t\t\t\tconst effectorBone = bones[ ik.effector ];\n\n\t\t\t\tconst targetMesh = this.children[ offset ++ ];\n\t\t\t\tconst effectorMesh = this.children[ offset ++ ];\n\n\t\t\t\ttargetMesh.position.copy( getPosition( targetBone, _matrix ) );\n\t\t\t\teffectorMesh.position.copy( getPosition( effectorBone, _matrix ) );\n\n\t\t\t\tfor ( let j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst link = ik.links[ j ];\n\t\t\t\t\tconst linkBone = bones[ link.index ];\n\n\t\t\t\t\tconst linkMesh = this.children[ offset ++ ];\n\n\t\t\t\t\tlinkMesh.position.copy( getPosition( linkBone, _matrix ) );\n\n\t\t\t\t}\n\n\t\t\t\tconst line = this.children[ offset ++ ];\n\t\t\t\tconst array = line.geometry.attributes.position.array;\n\n\t\t\t\tsetPositionOfBoneToAttributeArray( array, 0, targetBone, _matrix );\n\t\t\t\tsetPositionOfBoneToAttributeArray( array, 1, effectorBone, _matrix );\n\n\t\t\t\tfor ( let j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst link = ik.links[ j ];\n\t\t\t\t\tconst linkBone = bones[ link.index ];\n\t\t\t\t\tsetPositionOfBoneToAttributeArray( array, j + 2, linkBone, _matrix );\n\n\t\t\t\t}\n\n\t\t\t\tline.geometry.attributes.position.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.matrix.copy( mesh.matrixWorld );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tthis.sphereGeometry.dispose();\n\n\t\tthis.targetSphereMaterial.dispose();\n\t\tthis.effectorSphereMaterial.dispose();\n\t\tthis.linkSphereMaterial.dispose();\n\t\tthis.lineMaterial.dispose();\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.isLine ) child.geometry.dispose();\n\n\t\t}\n\n\t}\n\n\t// private method\n\n\t_init() {\n\n\t\tconst scope = this;\n\t\tconst iks = this.iks;\n\n\t\tfunction createLineGeometry( ik ) {\n\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst vertices = new Float32Array( ( 2 + ik.links.length ) * 3 );\n\t\t\tgeometry.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction createTargetMesh() {\n\n\t\t\treturn new Mesh( scope.sphereGeometry, scope.targetSphereMaterial );\n\n\t\t}\n\n\t\tfunction createEffectorMesh() {\n\n\t\t\treturn new Mesh( scope.sphereGeometry, scope.effectorSphereMaterial );\n\n\t\t}\n\n\t\tfunction createLinkMesh() {\n\n\t\t\treturn new Mesh( scope.sphereGeometry, scope.linkSphereMaterial );\n\n\t\t}\n\n\t\tfunction createLine( ik ) {\n\n\t\t\treturn new Line( createLineGeometry( ik ), scope.lineMaterial );\n\n\t\t}\n\n\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\tconst ik = iks[ i ];\n\n\t\t\tthis.add( createTargetMesh() );\n\t\t\tthis.add( createEffectorMesh() );\n\n\t\t\tfor ( let j = 0, jl = ik.links.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.add( createLinkMesh() );\n\n\t\t\t}\n\n\t\t\tthis.add( createLine( ik ) );\n\n\t\t}\n\n\t}\n\n}\n\nexport { CCDIKSolver, CCDIKHelper };\n", "import {\n\tAnimationMixer,\n\tObject3D,\n\tQuaternion,\n\tVector3\n} from 'three';\nimport { CCDIKSolver } from '../animation/CCDIKSolver.js';\nimport { MMDPhysics } from '../animation/MMDPhysics.js';\n\n/**\n * MMDAnimationHelper handles animation of MMD assets loaded by MMDLoader\n * with MMD special features as IK, Grant, and Physics.\n *\n * Dependencies\n *  - ammo.js https://github.com/kripken/ammo.js\n *  - MMDPhysics\n *  - CCDIKSolver\n *\n * TODO\n *  - more precise grant skinning support.\n */\nclass MMDAnimationHelper {\n\n\t/**\n\t * @param {Object} params - (optional)\n\t * @param {boolean} params.sync - Whether animation durations of added objects are synched. Default is true.\n\t * @param {Number} params.afterglow - Default is 0.0.\n\t * @param {boolean} params.resetPhysicsOnLoop - Default is true.\n\t */\n\tconstructor( params = {} ) {\n\n\t\tthis.meshes = [];\n\n\t\tthis.camera = null;\n\t\tthis.cameraTarget = new Object3D();\n\t\tthis.cameraTarget.name = 'target';\n\n\t\tthis.audio = null;\n\t\tthis.audioManager = null;\n\n\t\tthis.objects = new WeakMap();\n\n\t\tthis.configuration = {\n\t\t\tsync: params.sync !== undefined ? params.sync : true,\n\t\t\tafterglow: params.afterglow !== undefined ? params.afterglow : 0.0,\n\t\t\tresetPhysicsOnLoop: params.resetPhysicsOnLoop !== undefined ? params.resetPhysicsOnLoop : true,\n\t\t\tpmxAnimation: params.pmxAnimation !== undefined ? params.pmxAnimation : false\n\t\t};\n\n\t\tthis.enabled = {\n\t\t\tanimation: true,\n\t\t\tik: true,\n\t\t\tgrant: true,\n\t\t\tphysics: true,\n\t\t\tcameraAnimation: true\n\t\t};\n\n\t\tthis.onBeforePhysics = function ( /* mesh */ ) {};\n\n\t\t// experimental\n\t\tthis.sharedPhysics = false;\n\t\tthis.masterPhysics = null;\n\n\t}\n\n\t/**\n\t * Adds an Three.js Object to helper and setups animation.\n\t * The anmation durations of added objects are synched\n\t * if this.configuration.sync is true.\n\t *\n\t * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n\t * @param {Object} params - (optional)\n\t * @param {THREE.AnimationClip|Array<THREE.AnimationClip>} params.animation - Only for THREE.SkinnedMesh and THREE.Camera. Default is undefined.\n\t * @param {boolean} params.physics - Only for THREE.SkinnedMesh. Default is true.\n\t * @param {Integer} params.warmup - Only for THREE.SkinnedMesh and physics is true. Default is 60.\n\t * @param {Number} params.unitStep - Only for THREE.SkinnedMesh and physics is true. Default is 1 / 65.\n\t * @param {Integer} params.maxStepNum - Only for THREE.SkinnedMesh and physics is true. Default is 3.\n\t * @param {Vector3} params.gravity - Only for THREE.SkinnedMesh and physics is true. Default ( 0, - 9.8 * 10, 0 ).\n\t * @param {Number} params.delayTime - Only for THREE.Audio. Default is 0.0.\n\t * @return {MMDAnimationHelper}\n\t */\n\tadd( object, params = {} ) {\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tthis._addMesh( object, params );\n\n\t\t} else if ( object.isCamera ) {\n\n\t\t\tthis._setupCamera( object, params );\n\n\t\t} else if ( object.type === 'Audio' ) {\n\n\t\t\tthis._setupAudio( object, params );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper.add: '\n\t\t\t\t+ 'accepts only '\n\t\t\t\t+ 'THREE.SkinnedMesh or '\n\t\t\t\t+ 'THREE.Camera or '\n\t\t\t\t+ 'THREE.Audio instance.' );\n\n\t\t}\n\n\t\tif ( this.configuration.sync ) this._syncDuration();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Removes an Three.js Object from helper.\n\t *\n\t * @param {THREE.SkinnedMesh|THREE.Camera|THREE.Audio} object\n\t * @return {MMDAnimationHelper}\n\t */\n\tremove( object ) {\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tthis._removeMesh( object );\n\n\t\t} else if ( object.isCamera ) {\n\n\t\t\tthis._clearCamera( object );\n\n\t\t} else if ( object.type === 'Audio' ) {\n\n\t\t\tthis._clearAudio( object );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper.remove: '\n\t\t\t\t+ 'accepts only '\n\t\t\t\t+ 'THREE.SkinnedMesh or '\n\t\t\t\t+ 'THREE.Camera or '\n\t\t\t\t+ 'THREE.Audio instance.' );\n\n\t\t}\n\n\t\tif ( this.configuration.sync ) this._syncDuration();\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates the animation.\n\t *\n\t * @param {Number} delta\n\t * @return {MMDAnimationHelper}\n\t */\n\tupdate( delta ) {\n\n\t\tif ( this.audioManager !== null ) this.audioManager.control( delta );\n\n\t\tfor ( let i = 0; i < this.meshes.length; i ++ ) {\n\n\t\t\tthis._animateMesh( this.meshes[ i ], delta );\n\n\t\t}\n\n\t\tif ( this.sharedPhysics ) this._updateSharedPhysics( delta );\n\n\t\tif ( this.camera !== null ) this._animateCamera( this.camera, delta );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Changes the pose of SkinnedMesh as VPD specifies.\n\t *\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Object} vpd - VPD content parsed MMDParser\n\t * @param {Object} params - (optional)\n\t * @param {boolean} params.resetPose - Default is true.\n\t * @param {boolean} params.ik - Default is true.\n\t * @param {boolean} params.grant - Default is true.\n\t * @return {MMDAnimationHelper}\n\t */\n\tpose( mesh, vpd, params = {} ) {\n\n\t\tif ( params.resetPose !== false ) mesh.pose();\n\n\t\tconst bones = mesh.skeleton.bones;\n\t\tconst boneParams = vpd.bones;\n\n\t\tconst boneNameDictionary = {};\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\tboneNameDictionary[ bones[ i ].name ] = i;\n\n\t\t}\n\n\t\tconst vector = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\n\t\tfor ( let i = 0, il = boneParams.length; i < il; i ++ ) {\n\n\t\t\tconst boneParam = boneParams[ i ];\n\t\t\tconst boneIndex = boneNameDictionary[ boneParam.name ];\n\n\t\t\tif ( boneIndex === undefined ) continue;\n\n\t\t\tconst bone = bones[ boneIndex ];\n\t\t\tbone.position.add( vector.fromArray( boneParam.translation ) );\n\t\t\tbone.quaternion.multiply( quaternion.fromArray( boneParam.quaternion ) );\n\n\t\t}\n\n\t\tmesh.updateMatrixWorld( true );\n\n\t\t// PMX animation system special path\n\t\tif ( this.configuration.pmxAnimation &&\n\t\t\tmesh.geometry.userData.MMD && mesh.geometry.userData.MMD.format === 'pmx' ) {\n\n\t\t\tconst sortedBonesData = this._sortBoneDataArray( mesh.geometry.userData.MMD.bones.slice() );\n\t\t\tconst ikSolver = params.ik !== false ? this._createCCDIKSolver( mesh ) : null;\n\t\t\tconst grantSolver = params.grant !== false ? this.createGrantSolver( mesh ) : null;\n\t\t\tthis._animatePMXMesh( mesh, sortedBonesData, ikSolver, grantSolver );\n\n\t\t} else {\n\n\t\t\tif ( params.ik !== false ) {\n\n\t\t\t\tthis._createCCDIKSolver( mesh ).update();\n\n\t\t\t}\n\n\t\t\tif ( params.grant !== false ) {\n\n\t\t\t\tthis.createGrantSolver( mesh ).update();\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Enabes/Disables an animation feature.\n\t *\n\t * @param {string} key\n\t * @param {boolean} enabled\n\t * @return {MMDAnimationHelper}\n\t */\n\tenable( key, enabled ) {\n\n\t\tif ( this.enabled[ key ] === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper.enable: '\n\t\t\t\t+ 'unknown key ' + key );\n\n\t\t}\n\n\t\tthis.enabled[ key ] = enabled;\n\n\t\tif ( key === 'physics' ) {\n\n\t\t\tfor ( let i = 0, il = this.meshes.length; i < il; i ++ ) {\n\n\t\t\t\tthis._optimizeIK( this.meshes[ i ], enabled );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates an GrantSolver instance.\n\t *\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @return {GrantSolver}\n\t */\n\tcreateGrantSolver( mesh ) {\n\n\t\treturn new GrantSolver( mesh, mesh.geometry.userData.MMD.grants );\n\n\t}\n\n\t// private methods\n\n\t_addMesh( mesh, params ) {\n\n\t\tif ( this.meshes.indexOf( mesh ) >= 0 ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper._addMesh: '\n\t\t\t\t+ 'SkinnedMesh \\'' + mesh.name + '\\' has already been added.' );\n\n\t\t}\n\n\t\tthis.meshes.push( mesh );\n\t\tthis.objects.set( mesh, { looped: false } );\n\n\t\tthis._setupMeshAnimation( mesh, params.animation );\n\n\t\tif ( params.physics !== false ) {\n\n\t\t\tthis._setupMeshPhysics( mesh, params );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t_setupCamera( camera, params ) {\n\n\t\tif ( this.camera === camera ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper._setupCamera: '\n\t\t\t\t+ 'Camera \\'' + camera.name + '\\' has already been set.' );\n\n\t\t}\n\n\t\tif ( this.camera ) this.clearCamera( this.camera );\n\n\t\tthis.camera = camera;\n\n\t\tcamera.add( this.cameraTarget );\n\n\t\tthis.objects.set( camera, {} );\n\n\t\tif ( params.animation !== undefined ) {\n\n\t\t\tthis._setupCameraAnimation( camera, params.animation );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t_setupAudio( audio, params ) {\n\n\t\tif ( this.audio === audio ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper._setupAudio: '\n\t\t\t\t+ 'Audio \\'' + audio.name + '\\' has already been set.' );\n\n\t\t}\n\n\t\tif ( this.audio ) this.clearAudio( this.audio );\n\n\t\tthis.audio = audio;\n\t\tthis.audioManager = new AudioManager( audio, params );\n\n\t\tthis.objects.set( this.audioManager, {\n\t\t\tduration: this.audioManager.duration\n\t\t} );\n\n\t\treturn this;\n\n\t}\n\n\t_removeMesh( mesh ) {\n\n\t\tlet found = false;\n\t\tlet writeIndex = 0;\n\n\t\tfor ( let i = 0, il = this.meshes.length; i < il; i ++ ) {\n\n\t\t\tif ( this.meshes[ i ] === mesh ) {\n\n\t\t\t\tthis.objects.delete( mesh );\n\t\t\t\tfound = true;\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tthis.meshes[ writeIndex ++ ] = this.meshes[ i ];\n\n\t\t}\n\n\t\tif ( ! found ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper._removeMesh: '\n\t\t\t\t+ 'SkinnedMesh \\'' + mesh.name + '\\' has not been added yet.' );\n\n\t\t}\n\n\t\tthis.meshes.length = writeIndex;\n\n\t\treturn this;\n\n\t}\n\n\t_clearCamera( camera ) {\n\n\t\tif ( camera !== this.camera ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper._clearCamera: '\n\t\t\t\t+ 'Camera \\'' + camera.name + '\\' has not been set yet.' );\n\n\t\t}\n\n\t\tthis.camera.remove( this.cameraTarget );\n\n\t\tthis.objects.delete( this.camera );\n\t\tthis.camera = null;\n\n\t\treturn this;\n\n\t}\n\n\t_clearAudio( audio ) {\n\n\t\tif ( audio !== this.audio ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper._clearAudio: '\n\t\t\t\t+ 'Audio \\'' + audio.name + '\\' has not been set yet.' );\n\n\t\t}\n\n\t\tthis.objects.delete( this.audioManager );\n\n\t\tthis.audio = null;\n\t\tthis.audioManager = null;\n\n\t\treturn this;\n\n\t}\n\n\t_setupMeshAnimation( mesh, animation ) {\n\n\t\tconst objects = this.objects.get( mesh );\n\n\t\tif ( animation !== undefined ) {\n\n\t\t\tconst animations = Array.isArray( animation )\n\t\t\t\t? animation : [ animation ];\n\n\t\t\tobjects.mixer = new AnimationMixer( mesh );\n\n\t\t\tfor ( let i = 0, il = animations.length; i < il; i ++ ) {\n\n\t\t\t\tobjects.mixer.clipAction( animations[ i ] ).play();\n\n\t\t\t}\n\n\t\t\t// TODO: find a workaround not to access ._clip looking like a private property\n\t\t\tobjects.mixer.addEventListener( 'loop', function ( event ) {\n\n\t\t\t\tconst tracks = event.action._clip.tracks;\n\n\t\t\t\tif ( tracks.length > 0 && tracks[ 0 ].name.slice( 0, 6 ) !== '.bones' ) return;\n\n\t\t\t\tobjects.looped = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t\tobjects.ikSolver = this._createCCDIKSolver( mesh );\n\t\tobjects.grantSolver = this.createGrantSolver( mesh );\n\n\t\treturn this;\n\n\t}\n\n\t_setupCameraAnimation( camera, animation ) {\n\n\t\tconst animations = Array.isArray( animation )\n\t\t\t? animation : [ animation ];\n\n\t\tconst objects = this.objects.get( camera );\n\n\t\tobjects.mixer = new AnimationMixer( camera );\n\n\t\tfor ( let i = 0, il = animations.length; i < il; i ++ ) {\n\n\t\t\tobjects.mixer.clipAction( animations[ i ] ).play();\n\n\t\t}\n\n\t}\n\n\t_setupMeshPhysics( mesh, params ) {\n\n\t\tconst objects = this.objects.get( mesh );\n\n\t\t// shared physics is experimental\n\n\t\tif ( params.world === undefined && this.sharedPhysics ) {\n\n\t\t\tconst masterPhysics = this._getMasterPhysics();\n\n\t\t\tif ( masterPhysics !== null ) world = masterPhysics.world; // eslint-disable-line no-undef\n\n\t\t}\n\n\t\tobjects.physics = this._createMMDPhysics( mesh, params );\n\n\t\tif ( objects.mixer && params.animationWarmup !== false ) {\n\n\t\t\tthis._animateMesh( mesh, 0 );\n\t\t\tobjects.physics.reset();\n\n\t\t}\n\n\t\tobjects.physics.warmup( params.warmup !== undefined ? params.warmup : 60 );\n\n\t\tthis._optimizeIK( mesh, true );\n\n\t}\n\n\t_animateMesh( mesh, delta ) {\n\n\t\tconst objects = this.objects.get( mesh );\n\n\t\tconst mixer = objects.mixer;\n\t\tconst ikSolver = objects.ikSolver;\n\t\tconst grantSolver = objects.grantSolver;\n\t\tconst physics = objects.physics;\n\t\tconst looped = objects.looped;\n\n\t\tif ( mixer && this.enabled.animation ) {\n\n\t\t\t// alternate solution to save/restore bones but less performant?\n\t\t\t//mesh.pose();\n\t\t\t//this._updatePropertyMixersBuffer( mesh );\n\n\t\t\tthis._restoreBones( mesh );\n\n\t\t\tmixer.update( delta );\n\n\t\t\tthis._saveBones( mesh );\n\n\t\t\t// PMX animation system special path\n\t\t\tif ( this.configuration.pmxAnimation &&\n\t\t\t\tmesh.geometry.userData.MMD && mesh.geometry.userData.MMD.format === 'pmx' ) {\n\n\t\t\t\tif ( ! objects.sortedBonesData ) objects.sortedBonesData = this._sortBoneDataArray( mesh.geometry.userData.MMD.bones.slice() );\n\n\t\t\t\tthis._animatePMXMesh(\n\t\t\t\t\tmesh,\n\t\t\t\t\tobjects.sortedBonesData,\n\t\t\t\t\tikSolver && this.enabled.ik ? ikSolver : null,\n\t\t\t\t\tgrantSolver && this.enabled.grant ? grantSolver : null\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tif ( ikSolver && this.enabled.ik ) {\n\n\t\t\t\t\tmesh.updateMatrixWorld( true );\n\t\t\t\t\tikSolver.update();\n\n\t\t\t\t}\n\n\t\t\t\tif ( grantSolver && this.enabled.grant ) {\n\n\t\t\t\t\tgrantSolver.update();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( looped === true && this.enabled.physics ) {\n\n\t\t\tif ( physics && this.configuration.resetPhysicsOnLoop ) physics.reset();\n\n\t\t\tobjects.looped = false;\n\n\t\t}\n\n\t\tif ( physics && this.enabled.physics && ! this.sharedPhysics ) {\n\n\t\t\tthis.onBeforePhysics( mesh );\n\t\t\tphysics.update( delta );\n\n\t\t}\n\n\t}\n\n\t// Sort bones in order by 1. transformationClass and 2. bone index.\n\t// In PMX animation system, bone transformations should be processed\n\t// in this order.\n\t_sortBoneDataArray( boneDataArray ) {\n\n\t\treturn boneDataArray.sort( function ( a, b ) {\n\n\t\t\tif ( a.transformationClass !== b.transformationClass ) {\n\n\t\t\t\treturn a.transformationClass - b.transformationClass;\n\n\t\t\t} else {\n\n\t\t\t\treturn a.index - b.index;\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t// PMX Animation system is a bit too complex and doesn't great match to\n\t// Three.js Animation system. This method attempts to simulate it as much as\n\t// possible but doesn't perfectly simulate.\n\t// This method is more costly than the regular one so\n\t// you are recommended to set constructor parameter \"pmxAnimation: true\"\n\t// only if your PMX model animation doesn't work well.\n\t// If you need better method you would be required to write your own.\n\t_animatePMXMesh( mesh, sortedBonesData, ikSolver, grantSolver ) {\n\n\t\t_quaternionIndex = 0;\n\t\t_grantResultMap.clear();\n\n\t\tfor ( let i = 0, il = sortedBonesData.length; i < il; i ++ ) {\n\n\t\t\tupdateOne( mesh, sortedBonesData[ i ].index, ikSolver, grantSolver );\n\n\t\t}\n\n\t\tmesh.updateMatrixWorld( true );\n\t\treturn this;\n\n\t}\n\n\t_animateCamera( camera, delta ) {\n\n\t\tconst mixer = this.objects.get( camera ).mixer;\n\n\t\tif ( mixer && this.enabled.cameraAnimation ) {\n\n\t\t\tmixer.update( delta );\n\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t\tcamera.up.set( 0, 1, 0 );\n\t\t\tcamera.up.applyQuaternion( camera.quaternion );\n\t\t\tcamera.lookAt( this.cameraTarget.position );\n\n\t\t}\n\n\t}\n\n\t_optimizeIK( mesh, physicsEnabled ) {\n\n\t\tconst iks = mesh.geometry.userData.MMD.iks;\n\t\tconst bones = mesh.geometry.userData.MMD.bones;\n\n\t\tfor ( let i = 0, il = iks.length; i < il; i ++ ) {\n\n\t\t\tconst ik = iks[ i ];\n\t\t\tconst links = ik.links;\n\n\t\t\tfor ( let j = 0, jl = links.length; j < jl; j ++ ) {\n\n\t\t\t\tconst link = links[ j ];\n\n\t\t\t\tif ( physicsEnabled === true ) {\n\n\t\t\t\t\t// disable IK of the bone the corresponding rigidBody type of which is 1 or 2\n\t\t\t\t\t// because its rotation will be overriden by physics\n\t\t\t\t\tlink.enabled = bones[ link.index ].rigidBodyType > 0 ? false : true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlink.enabled = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_createCCDIKSolver( mesh ) {\n\n\t\tif ( CCDIKSolver === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.MMDAnimationHelper: Import CCDIKSolver.' );\n\n\t\t}\n\n\t\treturn new CCDIKSolver( mesh, mesh.geometry.userData.MMD.iks );\n\n\t}\n\n\t_createMMDPhysics( mesh, params ) {\n\n\t\tif ( MMDPhysics === undefined ) {\n\n\t\t\tthrow new Error( 'THREE.MMDPhysics: Import MMDPhysics.' );\n\n\t\t}\n\n\t\treturn new MMDPhysics(\n\t\t\tmesh,\n\t\t\tmesh.geometry.userData.MMD.rigidBodies,\n\t\t\tmesh.geometry.userData.MMD.constraints,\n\t\t\tparams );\n\n\t}\n\n\t/*\n\t * Detects the longest duration and then sets it to them to sync.\n\t * TODO: Not to access private properties ( ._actions and ._clip )\n\t */\n\t_syncDuration() {\n\n\t\tlet max = 0.0;\n\n\t\tconst objects = this.objects;\n\t\tconst meshes = this.meshes;\n\t\tconst camera = this.camera;\n\t\tconst audioManager = this.audioManager;\n\n\t\t// get the longest duration\n\n\t\tfor ( let i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\tconst mixer = this.objects.get( meshes[ i ] ).mixer;\n\n\t\t\tif ( mixer === undefined ) continue;\n\n\t\t\tfor ( let j = 0; j < mixer._actions.length; j ++ ) {\n\n\t\t\t\tconst clip = mixer._actions[ j ]._clip;\n\n\t\t\t\tif ( ! objects.has( clip ) ) {\n\n\t\t\t\t\tobjects.set( clip, {\n\t\t\t\t\t\tduration: clip.duration\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tmax = Math.max( max, objects.get( clip ).duration );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( camera !== null ) {\n\n\t\t\tconst mixer = this.objects.get( camera ).mixer;\n\n\t\t\tif ( mixer !== undefined ) {\n\n\t\t\t\tfor ( let i = 0, il = mixer._actions.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst clip = mixer._actions[ i ]._clip;\n\n\t\t\t\t\tif ( ! objects.has( clip ) ) {\n\n\t\t\t\t\t\tobjects.set( clip, {\n\t\t\t\t\t\t\tduration: clip.duration\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmax = Math.max( max, objects.get( clip ).duration );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( audioManager !== null ) {\n\n\t\t\tmax = Math.max( max, objects.get( audioManager ).duration );\n\n\t\t}\n\n\t\tmax += this.configuration.afterglow;\n\n\t\t// update the duration\n\n\t\tfor ( let i = 0, il = this.meshes.length; i < il; i ++ ) {\n\n\t\t\tconst mixer = this.objects.get( this.meshes[ i ] ).mixer;\n\n\t\t\tif ( mixer === undefined ) continue;\n\n\t\t\tfor ( let j = 0, jl = mixer._actions.length; j < jl; j ++ ) {\n\n\t\t\t\tmixer._actions[ j ]._clip.duration = max;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( camera !== null ) {\n\n\t\t\tconst mixer = this.objects.get( camera ).mixer;\n\n\t\t\tif ( mixer !== undefined ) {\n\n\t\t\t\tfor ( let i = 0, il = mixer._actions.length; i < il; i ++ ) {\n\n\t\t\t\t\tmixer._actions[ i ]._clip.duration = max;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( audioManager !== null ) {\n\n\t\t\taudioManager.duration = max;\n\n\t\t}\n\n\t}\n\n\t// workaround\n\n\t_updatePropertyMixersBuffer( mesh ) {\n\n\t\tconst mixer = this.objects.get( mesh ).mixer;\n\n\t\tconst propertyMixers = mixer._bindings;\n\t\tconst accuIndex = mixer._accuIndex;\n\n\t\tfor ( let i = 0, il = propertyMixers.length; i < il; i ++ ) {\n\n\t\t\tconst propertyMixer = propertyMixers[ i ];\n\t\t\tconst buffer = propertyMixer.buffer;\n\t\t\tconst stride = propertyMixer.valueSize;\n\t\t\tconst offset = ( accuIndex + 1 ) * stride;\n\n\t\t\tpropertyMixer.binding.getValue( buffer, offset );\n\n\t\t}\n\n\t}\n\n\t/*\n\t * Avoiding these two issues by restore/save bones before/after mixer animation.\n\t *\n\t * 1. PropertyMixer used by AnimationMixer holds cache value in .buffer.\n\t *    Calculating IK, Grant, and Physics after mixer animation can break\n\t *    the cache coherency.\n\t *\n\t * 2. Applying Grant two or more times without reset the posing breaks model.\n\t */\n\t_saveBones( mesh ) {\n\n\t\tconst objects = this.objects.get( mesh );\n\n\t\tconst bones = mesh.skeleton.bones;\n\n\t\tlet backupBones = objects.backupBones;\n\n\t\tif ( backupBones === undefined ) {\n\n\t\t\tbackupBones = new Float32Array( bones.length * 7 );\n\t\t\tobjects.backupBones = backupBones;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tbone.position.toArray( backupBones, i * 7 );\n\t\t\tbone.quaternion.toArray( backupBones, i * 7 + 3 );\n\n\t\t}\n\n\t}\n\n\t_restoreBones( mesh ) {\n\n\t\tconst objects = this.objects.get( mesh );\n\n\t\tconst backupBones = objects.backupBones;\n\n\t\tif ( backupBones === undefined ) return;\n\n\t\tconst bones = mesh.skeleton.bones;\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tbone.position.fromArray( backupBones, i * 7 );\n\t\t\tbone.quaternion.fromArray( backupBones, i * 7 + 3 );\n\n\t\t}\n\n\t}\n\n\t// experimental\n\n\t_getMasterPhysics() {\n\n\t\tif ( this.masterPhysics !== null ) return this.masterPhysics;\n\n\t\tfor ( let i = 0, il = this.meshes.length; i < il; i ++ ) {\n\n\t\t\tconst physics = this.meshes[ i ].physics;\n\n\t\t\tif ( physics !== undefined && physics !== null ) {\n\n\t\t\t\tthis.masterPhysics = physics;\n\t\t\t\treturn this.masterPhysics;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t_updateSharedPhysics( delta ) {\n\n\t\tif ( this.meshes.length === 0 || ! this.enabled.physics || ! this.sharedPhysics ) return;\n\n\t\tconst physics = this._getMasterPhysics();\n\n\t\tif ( physics === null ) return;\n\n\t\tfor ( let i = 0, il = this.meshes.length; i < il; i ++ ) {\n\n\t\t\tconst p = this.meshes[ i ].physics;\n\n\t\t\tif ( p !== null && p !== undefined ) {\n\n\t\t\t\tp.updateRigidBodies();\n\n\t\t\t}\n\n\t\t}\n\n\t\tphysics.stepSimulation( delta );\n\n\t\tfor ( let i = 0, il = this.meshes.length; i < il; i ++ ) {\n\n\t\t\tconst p = this.meshes[ i ].physics;\n\n\t\t\tif ( p !== null && p !== undefined ) {\n\n\t\t\t\tp.updateBones();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\n// Keep working quaternions for less GC\nconst _quaternions = [];\nlet _quaternionIndex = 0;\n\nfunction getQuaternion() {\n\n\tif ( _quaternionIndex >= _quaternions.length ) {\n\n\t\t_quaternions.push( new Quaternion() );\n\n\t}\n\n\treturn _quaternions[ _quaternionIndex ++ ];\n\n}\n\n// Save rotation whose grant and IK are already applied\n// used by grant children\nconst _grantResultMap = new Map();\n\nfunction updateOne( mesh, boneIndex, ikSolver, grantSolver ) {\n\n\tconst bones = mesh.skeleton.bones;\n\tconst bonesData = mesh.geometry.userData.MMD.bones;\n\tconst boneData = bonesData[ boneIndex ];\n\tconst bone = bones[ boneIndex ];\n\n\t// Return if already updated by being referred as a grant parent.\n\tif ( _grantResultMap.has( boneIndex ) ) return;\n\n\tconst quaternion = getQuaternion();\n\n\t// Initialize grant result here to prevent infinite loop.\n\t// If it's referred before updating with actual result later\n\t// result without applyting IK or grant is gotten\n\t// but better than composing of infinite loop.\n\t_grantResultMap.set( boneIndex, quaternion.copy( bone.quaternion ) );\n\n\t// @TODO: Support global grant and grant position\n\tif ( grantSolver && boneData.grant &&\n\t\t! boneData.grant.isLocal && boneData.grant.affectRotation ) {\n\n\t\tconst parentIndex = boneData.grant.parentIndex;\n\t\tconst ratio = boneData.grant.ratio;\n\n\t\tif ( ! _grantResultMap.has( parentIndex ) ) {\n\n\t\t\tupdateOne( mesh, parentIndex, ikSolver, grantSolver );\n\n\t\t}\n\n\t\tgrantSolver.addGrantRotation( bone, _grantResultMap.get( parentIndex ), ratio );\n\n\t}\n\n\tif ( ikSolver && boneData.ik ) {\n\n\t\t// @TODO: Updating world matrices every time solving an IK bone is\n\t\t// costly. Optimize if possible.\n\t\tmesh.updateMatrixWorld( true );\n\t\tikSolver.updateOne( boneData.ik );\n\n\t\t// No confident, but it seems the grant results with ik links should be updated?\n\t\tconst links = boneData.ik.links;\n\n\t\tfor ( let i = 0, il = links.length; i < il; i ++ ) {\n\n\t\t\tconst link = links[ i ];\n\n\t\t\tif ( link.enabled === false ) continue;\n\n\t\t\tconst linkIndex = link.index;\n\n\t\t\tif ( _grantResultMap.has( linkIndex ) ) {\n\n\t\t\t\t_grantResultMap.set( linkIndex, _grantResultMap.get( linkIndex ).copy( bones[ linkIndex ].quaternion ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// Update with the actual result here\n\tquaternion.copy( bone.quaternion );\n\n}\n\n//\n\nclass AudioManager {\n\n\t/**\n\t * @param {THREE.Audio} audio\n\t * @param {Object} params - (optional)\n\t * @param {Nuumber} params.delayTime\n\t */\n\tconstructor( audio, params = {} ) {\n\n\t\tthis.audio = audio;\n\n\t\tthis.elapsedTime = 0.0;\n\t\tthis.currentTime = 0.0;\n\t\tthis.delayTime = params.delayTime !== undefined\n\t\t\t? params.delayTime : 0.0;\n\n\t\tthis.audioDuration = this.audio.buffer.duration;\n\t\tthis.duration = this.audioDuration + this.delayTime;\n\n\t}\n\n\t/**\n\t * @param {Number} delta\n\t * @return {AudioManager}\n\t */\n\tcontrol( delta ) {\n\n\t\tthis.elapsed += delta;\n\t\tthis.currentTime += delta;\n\n\t\tif ( this._shouldStopAudio() ) this.audio.stop();\n\t\tif ( this._shouldStartAudio() ) this.audio.play();\n\n\t\treturn this;\n\n\t}\n\n\t// private methods\n\n\t_shouldStartAudio() {\n\n\t\tif ( this.audio.isPlaying ) return false;\n\n\t\twhile ( this.currentTime >= this.duration ) {\n\n\t\t\tthis.currentTime -= this.duration;\n\n\t\t}\n\n\t\tif ( this.currentTime < this.delayTime ) return false;\n\n\t\t// 'duration' can be bigger than 'audioDuration + delayTime' because of sync configuration\n\t\tif ( ( this.currentTime - this.delayTime ) > this.audioDuration ) return false;\n\n\t\treturn true;\n\n\t}\n\n\t_shouldStopAudio() {\n\n\t\treturn this.audio.isPlaying &&\n\t\t\tthis.currentTime >= this.duration;\n\n\t}\n\n}\n\nconst _q = new Quaternion();\n\n/**\n * Solver for Grant (Fuyo in Japanese. I just google translated because\n * Fuyo may be MMD specific term and may not be common word in 3D CG terms.)\n * Grant propagates a bone's transform to other bones transforms even if\n * they are not children.\n * @param {THREE.SkinnedMesh} mesh\n * @param {Array<Object>} grants\n */\nclass GrantSolver {\n\n\tconstructor( mesh, grants = [] ) {\n\n\t\tthis.mesh = mesh;\n\t\tthis.grants = grants;\n\n\t}\n\n\t/**\n\t * Solve all the grant bones\n\t * @return {GrantSolver}\n\t */\n\tupdate() {\n\n\t\tconst grants = this.grants;\n\n\t\tfor ( let i = 0, il = grants.length; i < il; i ++ ) {\n\n\t\t\tthis.updateOne( grants[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Solve a grant bone\n\t * @param {Object} grant - grant parameter\n\t * @return {GrantSolver}\n\t */\n\tupdateOne( grant ) {\n\n\t\tconst bones = this.mesh.skeleton.bones;\n\t\tconst bone = bones[ grant.index ];\n\t\tconst parentBone = bones[ grant.parentIndex ];\n\n\t\tif ( grant.isLocal ) {\n\n\t\t\t// TODO: implement\n\t\t\tif ( grant.affectPosition ) {\n\n\t\t\t}\n\n\t\t\t// TODO: implement\n\t\t\tif ( grant.affectRotation ) {\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// TODO: implement\n\t\t\tif ( grant.affectPosition ) {\n\n\t\t\t}\n\n\t\t\tif ( grant.affectRotation ) {\n\n\t\t\t\tthis.addGrantRotation( bone, parentBone.quaternion, grant.ratio );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddGrantRotation( bone, q, ratio ) {\n\n\t\t_q.set( 0, 0, 0, 1 );\n\t\t_q.slerp( q, ratio );\n\t\tbone.quaternion.multiply( _q );\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MMDAnimationHelper };\n"],
  "mappings": "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",
  "names": ["_q"]
}
